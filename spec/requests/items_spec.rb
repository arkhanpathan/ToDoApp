# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/items', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.

  let(:user) { create(:user) }

  let(:valid_attributes) do
    {
      title: 'Attend standup',
      description: 'Discuss on outstanding high priority tickets',
      start_date_time: DateTime.current,
      end_date_time: DateTime.current + 1.hour,
      status: 'todo',
      user_id: user.id
    }
  end

  let(:invalid_attributes) do
    {
      title: nil,
      description: 'Discuss on outstanding high priority tickets',
      start_date_time: nil,
      end_date_time: DateTime.current + 1.hour,
      status: 'todo'
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Item.create! valid_attributes
      sign_in user
      get items_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      item = Item.create! valid_attributes
      sign_in user
      get item_url(item)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      sign_in user
      get new_item_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      item = Item.create! valid_attributes
      sign_in user
      get edit_item_url(item)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Item' do
        sign_in user
        expect do
          post items_url, params: { item: valid_attributes }
        end.to change(Item, :count).by(1)
      end

      it 'redirects to the created item' do
        sign_in user
        post items_url, params: { item: valid_attributes }
        expect(response).to redirect_to(items_url)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Item' do
        sign_in user
        expect do
          post items_url, params: { item: invalid_attributes }
        end.to change(Item, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        sign_in user
        post items_url, params: { item: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { title: 'new title' }
      end

      it 'updates the requested item' do
        item = Item.create! valid_attributes
        title_before_update = item.title
        sign_in user
        patch item_url(item), params: { item: new_attributes }
        item.reload
        title_post_update = item.title
        expect(title_post_update).to_not eq(title_before_update)
        expect(title_post_update).to eq(new_attributes[:title])
      end

      it 'redirects to the item' do
        item = Item.create! valid_attributes
        sign_in user
        patch item_url(item), params: { item: new_attributes }
        item.reload
        expect(response).to redirect_to(items_url)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested item' do
      item = Item.create! valid_attributes
      sign_in user
      expect do
        delete item_url(item)
      end.to change(Item, :count).by(-1)
    end

    it 'should respond with turbo_stream' do
      item = Item.create! valid_attributes
      sign_in user
      delete item_url(item)
      expect(response.body.include?('turbo-stream')).to be_truthy
      expect(response.body.include?('action="remove"')).to be_truthy
      expect(response.body.include?("target=\"item_#{item.id}\"")).to be_truthy
    end
  end
end
